<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>algorithm on Crispy bLog</title>
    <link>https://heozeop.github.io/categories/algorithm/</link>
    <description>Recent content in algorithm on Crispy bLog</description>
    <image>
      <url>https://heozeop.github.io/static/%ED%94%84%EB%A1%9C%ED%95%84%20%EC%9D%B4%EB%AF%B8%EC%A7%80.jpeg</url>
      <link>https://heozeop.github.io/static/%ED%94%84%EB%A1%9C%ED%95%84%20%EC%9D%B4%EB%AF%B8%EC%A7%80.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 26 Oct 2023 20:23:08 +0900</lastBuildDate><atom:link href="https://heozeop.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm Boj 2146</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2146/</link>
      <pubDate>Thu, 26 Oct 2023 20:23:08 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2146/</guid>
      <description>문제 다리 만들기 문제를 생각해 보자. 1. 생각나는 대로: 대강 대륙은 갈 수 없는 곳 대륙 옆이 길이 1로 설정 bfs로 모두 돌면서 다른 대륙 도달하기 자세히 대륙 별로 대륙 가를 1자로 한다. visit을 나타낼때 출발지, 거리를 나타낸다. 만난 곳이라면 거리를 더해서 min에 저장한다. min을 출력한다. 시간 복잡도 N^2 0인 곳 + 상하좌우에 대륙있는 곳 n^2 탐색 같은 대륙 출발 대륙 통과 바다 짧은 데 다른 대륙 계산 시도 1 문제 대륙이 통과하면 만나지를 못한다.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 16236</title>
      <link>https://heozeop.github.io/post/algorithm-boj-16236/</link>
      <pubDate>Tue, 24 Oct 2023 21:30:46 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-16236/</guid>
      <description>문제 아기 상어 해결 방법을 생각해 보자. 방법 1: 생각 나는 대로: 기본 로직
물고기 크기/위치를 기준으로 정렬한다. 먹을 수 있는 물고기만 담는다. 거리를 계산한다. 가장 짧은 거리의 물고기만 먹는다. 먹은 수대로 상어 크기를 올린다. 핵심 로직
상어의 성장 여부 확인 먹을 수 있는 물고기만 담기 거리 계산하기 bfs로 탐색하기 글로벌 변수
먹은 물고기 수 상어 성장 여부 판단 상어 크기 상어 위치 시간 순차 로직
상어 위치 찾기 bfs탐색하며 왼 위 아래 오른쪽 순 돌기 가장 먼저 탐색 된 상어 크기보다 작은 물고기 섭취 물고기 섭취 불가시 종료 상어 성장 여부 판단 이동 시간 기록 1 - 4 반복 코드</description>
    </item>
    
    <item>
      <title>Algorithm Boj 14502</title>
      <link>https://heozeop.github.io/post/algorithm-boj-14502/</link>
      <pubDate>Mon, 23 Oct 2023 22:07:43 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-14502/</guid>
      <description>문제 연구소 접근 방법을 생각해보자. 방법 1: 생각나는 것: ~47분 바이러스 위치 확인하기
빈칸 위치 확인하기
빈칸 nC3 으로 위치뽑기
바이러스 위치 기준으로 돌면서 dfs로 맵 채우기 전체 - 바이러스 - 벽수로 빈값 구하기 빈값 크기 비교 하기 (n * m)C3 * (n * m) =&amp;gt; 약 266만
구현
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 directions = [ [0,1], [0,-1], [1,0], [-1, 0] ] def dfs(x,y, visited): global n,m, lab_map; for i in range(4): nx = x + directions[i][0] ny = y + directions[i][1] if nx &amp;lt; 0 or ny &amp;lt; 0 or nx &amp;gt;= n or ny &amp;gt;= m: continue if lab_map[nx][ny] !</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2178</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2178/</link>
      <pubDate>Mon, 23 Oct 2023 21:43:03 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2178/</guid>
      <description>문제 미로탐색 해법을 생각해보자. 방법 1: 그냥 떠오르는 대로 bfs로 0,0부터 탐색 가장 먼저 N,M 도착하면 출력하기 n^2 구현 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from collections import deque directions = [ [0,1], [0,-1], [1,0], [-1,0], ] VISITED = -1 TARGET = &amp;#39;1&amp;#39; queue = deque() queue.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2667</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2667/</link>
      <pubDate>Mon, 23 Oct 2023 20:59:09 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2667/</guid>
      <description>문제 단지 번호 붙이기 주요 로직을 생각해보자. 1번: 막생각 나는 대로 | O(n^3) 2차원 배열을 입력 받는다. 방문 여부를 const로 설정한다. 2차원 배열을 순회한다. 1이 아니면 통과한다. 상하좌우 탐색한다. dfs로 집 수를 찾는다. 집수 list에 저장한다. 집수 list를 정렬한다. 집수를 출력한다. 구현 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 TARGET = &amp;#39;1&amp;#39; VISITED = -1 cost_list = [] directions = [ [0, 1], [0, -1], [1,0], [-1,0] ] def dfs(x,y): global n map_list[x][y] = VISITED localCount = 1 for i in range(4): nx = x + directions[i][0] ny = y + directions[i][1] if nx &amp;lt; 0 or ny &amp;lt; 0 or nx &amp;gt;= n or ny &amp;gt;= n: continue if map_list[nx][ny] !</description>
    </item>
    
    <item>
      <title>Algorithm Boj 15686</title>
      <link>https://heozeop.github.io/post/algorithm-boj-15686/</link>
      <pubDate>Fri, 13 Oct 2023 19:45:06 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-15686/</guid>
      <description>핵심 아이디어 NM짜리 이차원 배열을 이용해 최소 치킨 거리를 구한다. 백트랙을 이용해 M개 집 치킨거리를 구한다. 구현 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 n, m = list(map(int, input().split())) city = [] for _ in range(n): city.</description>
    </item>
    
    <item>
      <title>Boj 15684</title>
      <link>https://heozeop.github.io/post/algorithm-boj-15684/</link>
      <pubDate>Sat, 07 Oct 2023 08:26:40 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-15684/</guid>
      <description>생각하기 핵심 로직 브루트포스 i -&amp;gt; i 로 가는지 점검한다. 짝수개여야 가능할 것 같다. 후보군을 리스트로 만든다. 후보군을 백트랙으로 돌면서 3개까지 돈다. 1-3반복한다. 핵심 조건 3보다 크면 -1 불가하면 -1 사고하지 못한점 짝수개여야 가능하다는 것은 필요 조건은 될 수 있어도 충분 조건이 아니다. 다음에 다시풀 문제 핵심 로직 탐지 탐지 하는 방법 내리가면서 시작점과 동일한 끝점인지 확인하기 내리 갈때는 양방향 확인하기 탐색 탐지 nh에 대해서 백트래킹 n^n*h^2 =&amp;gt; 90000으로 ㄱㅊ &amp;lt;- 틀림?</description>
    </item>
    
    <item>
      <title>Boj 14888</title>
      <link>https://heozeop.github.io/post/algorithm-boj-14888/</link>
      <pubDate>Fri, 06 Oct 2023 19:53:38 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-14888/</guid>
      <description>주요 로직 계속 계산하면서 큰값과 작은 값으로 비교한다. 전체 다 돌아야 하며, O(4n)이다. -10억 ~ 10억이므로 int 범위에서 된다. 예상하지 못한 것 음수가 나오는 경우, 나눗셈 연산을 할때 몫을 잘 구해야한다. 음수가 -10억까지 되는데 범위를 잘못 찍었다. code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 n = int(input()) nums = list(map(int, input().</description>
    </item>
    
    <item>
      <title>Boj 2661</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2661/</link>
      <pubDate>Thu, 05 Oct 2023 18:31:38 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2661/</guid>
      <description>주요 로직을 생각해 보자. 끝에 하나 붙을때 마다 점검해준다. 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 n = int(input()) s=[] def isBadSequence(addStr): temp = &amp;#34;&amp;#34;.join(s) + addStr for i in range(1, len(temp) // 2 + 1): if temp[-2 * i : -1 * i] == temp[-1 * i :]: return True return False def dfs(): global s if len(s) == n: print(&amp;#34;&amp;#34;.</description>
    </item>
    
    <item>
      <title>[알고리즘] Algorithm Boj 1107</title>
      <link>https://heozeop.github.io/post/algorithm-boj-1107/</link>
      <pubDate>Fri, 26 May 2023 05:12:05 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-1107/</guid>
      <description>TL;DR
GOLD4 문제 왜틀리지 시전 틀린 케이스를 찾아버리고야 말테다 그렇구나. 정확한 사고로 풀어야 겠다 오늘의 문제 뭔일인가. 논리적인 접근 위 문제는 특정한 값 위나 아래로 접근하며 가장 빠르게 도달하는 경우의 수를 구하는 문제입니다. 이러한 특성에 근거해, 목표로 하는 값의 2배로 접근시 충분히 원하는 결과를 얻을 것이라고 생각했습니다.
2번째 제출 까지는 말이죠
틀린답 using namespace std; vector&amp;lt;int&amp;gt; allowed; int targetChannel; int visited[1000001]; int m; int count(int); // 특정 지점으로 가는데까지 버튼 누르는 수 계산 void findCombinations(int, vector&amp;lt;int&amp;gt;&amp;amp;); // 1~제한까지 숫자 조합 생성 void input(); void solve(); int main(void) { input(); solve(); return 0; } void input() { cin &amp;gt;&amp;gt; targetChannel &amp;gt;&amp;gt; m; int temp; set&amp;lt;int&amp;gt; blocked; for(int i = 0; i &amp;lt; m; ++i) { cin &amp;gt;&amp;gt; temp; blocked.</description>
    </item>
    
  </channel>
</rss>
