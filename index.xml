<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Crispy bLog</title>
    <link>https://heozeop.github.io/</link>
    <description>Recent content on Crispy bLog</description>
    <image>
      <url>https://heozeop.github.io/static/%ED%94%84%EB%A1%9C%ED%95%84%20%EC%9D%B4%EB%AF%B8%EC%A7%80.jpeg</url>
      <link>https://heozeop.github.io/static/%ED%94%84%EB%A1%9C%ED%95%84%20%EC%9D%B4%EB%AF%B8%EC%A7%80.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 16 Mar 2024 21:25:46 +0900</lastBuildDate><atom:link href="https://heozeop.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JAVA Reflection API를 이용한 Annotation만들기</title>
      <link>https://heozeop.github.io/post/java-custom-annotation-with-reflection/</link>
      <pubDate>Sat, 16 Mar 2024 21:25:46 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/java-custom-annotation-with-reflection/</guid>
      <description>TL;DR Reflection이 뭔가 훑어 보기 Annotation이 뭔가 바라만 보기 Reflection으로 Annotation 다루기 Reflection이 뭔가 정의 Oracle의 문서에 따르면 Reflection의 정의는 아래와 같습니다.
Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine.
Reflection은 JVM에서 동작하고 있는 어플리케이션의 런타임 동작을 검사하거나 바꾸고자 할 때 사용하는 것이다.
https://docs.oracle.com/javase/tutorial/reflect/
주의할 점 성능 문제 야기 Reflection은 런타임에 동작을 합니다. 그렇기 때문에 동작을 할 때 JVM의 최적화 과정 일부가 동작하지 않을 수 있습니다.</description>
    </item>
    
    <item>
      <title>[회고] next step ATDD with Spring 3,4주차</title>
      <link>https://heozeop.github.io/post/experience-third-and-last-week-of-next-step/</link>
      <pubDate>Sun, 10 Mar 2024 21:07:19 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/experience-third-and-last-week-of-next-step/</guid>
      <description>TL;DR 미션은 재미있었다. 리뷰어님 스타일에 따라 리뷰 내용은 다르다. 마무리 하려고 글을 쓰긴 했는데&amp;hellip; 많이 짧네요. 미션은 재미있었다. 유저 로그인과 가격 구하기 3, 4주차의 핵심은 유저 로그인과 가격 구하기 관련 테스트 및 기능의 작성이었습니다. 유저 로그인의 경우 자칫 어려워질 수 있는 주제를 기본 코드들을 활용해 쉽게 할 수 있게 만들어 주었습니다. 추후 개인 프로젝트를 진행하면서도 참고할 법하다고 생각이 든 미션이었습니다.
리뷰어님의 스타일에 따라 리뷰 내용이 다르다. 나는 객체 지향적인 설계에 대한 피드백을 받고 싶었다.</description>
    </item>
    
    <item>
      <title>[회고] next step ATDD with Spring 2주차</title>
      <link>https://heozeop.github.io/post/experience-second-week-of-next-step-atdd/</link>
      <pubDate>Mon, 12 Feb 2024 19:07:19 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/experience-second-week-of-next-step-atdd/</guid>
      <description>TL;DR 인수 테스트와 함께 TDD를 함께 해보는 작업 진행 순서를 가진 데이터의 구현 팁 외부 의존성을 도메인 객체에서 활용하는 방법 배운 것 나는 평소에 outside in 테스트를 하고 있었다. inside out/outside in 인수 테스트를 이용해 테스트를 작성하는 방식으로 inside out, outside in 방법이 있습니다. inside out 방법은 도메인 객체부터 차근 차근 테스트를 쌓아 올리는 방식이고, outside in은 그 반대입니다. outside in 테스트의 과정은 웹프로젝트에서 아래와 같이 진행되었습니다.
컨트롤러를 작성한다. 서비스를 작성한다.</description>
    </item>
    
    <item>
      <title>AWS에서 aurora database의 Major 버전을 업그레이드하는 방법</title>
      <link>https://heozeop.github.io/post/research-aws-upload/</link>
      <pubDate>Thu, 01 Feb 2024 18:22:58 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/research-aws-upload/</guid>
      <description>TL;DR Aurora MySQL db를 업데이트하는 2가지 방법을 소개 2가지 방법 중 좋다고 생각한 방법과 이유를 소개 왜 와이 Aurora DB 2점대의 depreacation이슈 MySQL 5.7의 지원 종료와 함께 몇일 전이었습니다. MySQL 5.7버전이 정식 지원 종료된다는 소식을 들은게&amp;hellip; 이에 AWS에서는 AuroraDB 2점대를 3점대로 업그레이드 하라는 안내를 주었습니다. 그걸 이제서야 본 것이죠. 부랴 부랴 문서를 찾아 읽기 시작했습니다. 다행이도 문서는 매우 잘 정리가 되어있었고, 한글로 봐도 될 정도의 번역으로 만들어져 있었습니다.
이 글은 그 문서들을 읽고 내린 의견과 문서를 약간 정리한 내용을 소개하는 글입니다.</description>
    </item>
    
    <item>
      <title>[회고] next step ATDD with Spring 1주차</title>
      <link>https://heozeop.github.io/post/first-week-of-next-step/</link>
      <pubDate>Wed, 31 Jan 2024 21:07:19 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/first-week-of-next-step/</guid>
      <description>TL;DR Spring에서 RestAssured를 이용해 인수 테스트를 작성하는 방법 학습 Spring에 대한 이해의 한계를 맛봄 JPA를 사용해봄 NextStep ATDD with Spring 왜 와이 80만원 주고 강의를 샀습니다. 최근 JAVA를 학습하겠다고 다짐하여 Spring에 대한 학습을 다시 시작했습니다. 혼자 학습하고자 고군분투했지만 남는게 많이 없다고 느끼는 요즘이었습니다. 그런 그때, 과거에 결제만 했었던 NextStep에서 메일을 한통 받았습니다. ATDD with Spring 강의를 시작한다는 내용이었습니다.
강의 비용은 80만원이었지만 저는 지를 수 밖에 없었습니다. 강의 전반에 걸쳐 코드리뷰를 받을 수 있다는 점이 검토가 필요했던 제게 너무나도 매력적인 부분이었기 때문입니다.</description>
    </item>
    
    <item>
      <title>자바의 신 독후감 &amp; 정리</title>
      <link>https://heozeop.github.io/post/book-report-god-of-java/</link>
      <pubDate>Fri, 19 Jan 2024 13:11:06 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/book-report-god-of-java/</guid>
      <description>TL;DR 외우지는 못했다. 읽어볼법 하다. 능동적인 태도가 필요하다. 자바의 신을 읽게 된 계기 F-lab의 준비 도서 본인은 Javascript를 주언어로 사용하는 개발자입니다. 회사 환경에서 성장하고 있지 않다는 생각이 많이 들어서 F-lab Java 백엔드 과정을 신청했습니다. 해당 과정의 사전 과제 중 하나가 &amp;lsquo;Java의 신&amp;rsquo;을 읽기는 것이었습니다.
책의 첫인상 2권짜리 책은 합치면 생각보다 두꺼웠습니다. 하지만 인상과는 별개로 책의 시작은 그리 어렵지는 않았습니다. 제가 전공생이라서 그런 것인지, 책이 어렵지 않아서 그런 것인지는 잘 모르겠습니다. 책의 시작 부분을 빠르게 넘길 수 있었고, 읽는데 어려움은 크게 없었습니다.</description>
    </item>
    
    <item>
      <title>채팅 예제 만들기 1</title>
      <link>https://heozeop.github.io/post/develop-chat-example-1/</link>
      <pubDate>Tue, 26 Dec 2023 20:02:34 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/develop-chat-example-1/</guid>
      <description>TL;DR 채팅 예제를 만들어 본 후기 문서, 코드? 흥미 driven 개발. 채팅 예제 만들기 2 기대 요망. 채팅 예제 만들기 왜 와이 실력에 대한 고민을 하면서 저는 스스로를 반쪽짜리라고 생각해 왔습니다. 경험도, 지식도 부족한 반쪽짜리 개발자. 그래서 고민을 오래한 것 같습니다. 과연 잘하는 개발자란 무엇인가. 업무적으로 장애를 만나 수정할 기회가 없는 상황이라면, 성장하기 위해 무엇을 할 수 있을까. 고민 끝에 나온 결과는 &amp;lsquo;하고 싶은 걸, 하고 있을 때, 하고 싶은 형식으로 개발할 수 있는 능력&amp;rsquo;을 갖춰야 한다고 생각하게 되었습니다.</description>
    </item>
    
    <item>
      <title>Postgresql Row Level Security(로우 레벨 시큐리티)</title>
      <link>https://heozeop.github.io/post/postgresql-row-level-security/</link>
      <pubDate>Tue, 26 Dec 2023 19:50:50 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/postgresql-row-level-security/</guid>
      <description>ref: https://www.postgresql.org/docs/current/ddl-rowsecurity.html
Row Level Security 메타 정의 boolean을 리턴하는 query를 테이블의 row에 접근할 때 호출해 접근 권한을 확인하는 보안 방법 정의된 policy를 따름. 동작 optimizer의 optimization등의 leak proof fucntion 동작 RLS 확인 주어진 query 수행 활성화 ALTER TABLE ... ENABLE ROW LEVEL SECURITY; table owner등 bypassRLS 조건인 경우, RLS 확인을 강제하고 싶은 경우 아래 command 사용 ALTER TABLE ... FORCE ROW LEVEL SECURITY 활성화 여부는 policy 삭제와 관계 없음 table의 RLS가 disabled라도 policy는 편집 가능 고려 사항 performance row 접근시 마다 확인하기 때문에 영향을 줄 수 있다.</description>
    </item>
    
    <item>
      <title>디테일을 챙기는 개발자가 되고 싶어 하는 고찰</title>
      <link>https://heozeop.github.io/post/detailed-developer/</link>
      <pubDate>Thu, 05 Oct 2023 07:19:49 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/detailed-developer/</guid>
      <description>TL;DR 저는 디테일을 잘 못챙깁니다. 디테일을 챙기는 개발자가 어떤 사람인지 정리합니다. 디테일을 챙기는 개발자가 되기 위해 남은 과정을 정리합니다. 정리한 과정이 올바른지 퇴고 합니다. 저는 디테일을 잘 못챙깁니다. 항상 제가 받는 피드백이 있습니다.
| &amp;lsquo;크리스피님, 여기 이 입력에서는 이렇게 되어 확인 요청드립니다.&amp;rsquo;
지금까지는 받아오면서 아무생각 없이 이슈에 대응만 하였습니다. 그러다 문득 깨달아 버렸습니다.
&amp;lsquo;이게 맞나?&amp;rsquo;
항상 하는 실수인데, 예방하는 수는 없었을까? 한번 더 확인 하는게 불충분 하다면 다른 방법을 찾는게 좋지 않았을까?</description>
    </item>
    
    <item>
      <title>어떤 개발자가 되고 싶은지에 관한 고찰</title>
      <link>https://heozeop.github.io/post/i-wanna-be/</link>
      <pubDate>Wed, 30 Aug 2023 21:59:51 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/i-wanna-be/</guid>
      <description>TL;DR 상상해 보았습니다. 5년 뒤를 상상해 보았습니다. 3년 뒤를 상상해 보았습니다. 1년 뒤를 상상해 보았습니다. 저는 이런 개발자가 되고 싶은가 봅니다. 고민해 보았습니다. 최근 CTO님과 면담하며 질문을 받았습니다. &amp;lsquo;승찬님은 어떤 개발자가 되고 싶나요?&amp;rsquo; 항상 머리 복잡하다며 넘겨왔던 질문이기에 모른척을 하였습니다. 이제 저도 연차로 4년차가 됩니다. 하지만 아직 &amp;lsquo;되고 싶은 개발자&amp;rsquo;는 커녕 &amp;lsquo;어떤 공부를 할지&amp;rsquo; 조차 스스로 정하지 못했습니다. 집에 와서 심란한 마음에 더 이상은 이럴 수 없다고 생각했습니다. 혼자 끙끙 앓아봐야 소용없다고 판단해, 고민을 공유해 봅니다.</description>
    </item>
    
    <item>
      <title>[NestJS] 스웨거에 BasicAuth 더하기, feat fastify,GCP</title>
      <link>https://heozeop.github.io/post/nestjs-basic-auth-fastify/</link>
      <pubDate>Thu, 06 Jul 2023 21:36:00 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/nestjs-basic-auth-fastify/</guid>
      <description>스웨거 흔히 스웨거(Swagger)라고 부르는 OpenAPI를 사용할때, 저는 누가 어떻게 보느냐를 고민합니다. 직접 인증을 구현한 경우는 로그인을 시키고, AWS를 사용하는 경우 ip로 접근을 불가하게 만들기도 했습니다. 하지만 GCP의 CloudRun을 이용하는 경우, 구체적인 자원에 접근하기 어려워 Ip로 접근을 차단하는 것은 한계가 있었습니다.
그래서 떠올린게 basic auth였습니다. 물론 brute-force 공격에는 뚫리기야 하겠지만, 비용 대비 얻는게 크다고 생각했습니다. 제가 원하는 건 아무나 보지 못하는 것이고, 보안 관리는 기본적으로 구글에서 해주기 때문에 제 목적에 딱 알맞는 것이었죠.</description>
    </item>
    
    <item>
      <title>좋은 코드와 나쁜 코드</title>
      <link>https://heozeop.github.io/post/book-good-code-bad-code/</link>
      <pubDate>Tue, 20 Jun 2023 16:10:35 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/book-good-code-bad-code/</guid>
      <description>품질의 정의와 좋다 나쁘다를 생각하기</description>
    </item>
    
    <item>
      <title>[책] &#39;기억, 꿈, 사상&#39;에 대한 감상</title>
      <link>https://heozeop.github.io/post/book-memories-dreams-reflections/</link>
      <pubDate>Sun, 30 Oct 2022 20:49:13 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/book-memories-dreams-reflections/</guid>
      <description>저는 부끄러움이 많은 관심 종자입니다. 이 책의 감상을 나누고 싶지만, 거절이 무서워 글이라는 방법을 택했습니다. 구분선 아래로, 문장과 감상의 형식이 전개 됩니다. 읽은 날, 내용은 추가될 것입니다. 언젠가 이 내용을 함께 논의 할 수 있기를 소원해 봅니다.
2022년 스터디 카페에서 시작하며
문득 취리히에서의 내 생활이 떠올랐다. 내가 심취했던 유년시절의 세계는 영원한 것이었으며, 나는 그것으로부터 떨어져나와, 계속 굴러가며 점점 더 멀어져가는 시간 속으로 빠져들어가고 만 것이었다. 나는 나의 미래를 잃지 않기 위해 그 장소에서 억지로 몸을 돌려야만 했다.</description>
    </item>
    
    <item>
      <title>[경험] 시스템에 불이 확, 나는 왁</title>
      <link>https://heozeop.github.io/post/when-fire-on-the-external-system/</link>
      <pubDate>Fri, 28 Oct 2022 21:31:00 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/when-fire-on-the-external-system/</guid>
      <description>아쉬운 에러 대응 과정을 기록해 봅니다.</description>
    </item>
    
    <item>
      <title>의식적으로 쓰기 - 선언과 단언</title>
      <link>https://heozeop.github.io/post/typescript-type-assignment/</link>
      <pubDate>Wed, 19 Oct 2022 22:31:04 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/typescript-type-assignment/</guid>
      <description>들어가며 Typescript에선 변수에 type을 어떻게 할당하나요?
여러분이 위와 같은 질문을 받았다면, 어떻게 답변하시겠어요? 저는 Effective Typescript라는 책을 읽으면서, 이 질문을 생각하고 순간 멍해짐을 느꼈습니다. 제겐 너무나도 당연스러운 말인 변수에 type을 할당하는 문장을 풀어서 설명하려니, 적절한 문장이 떠오르지 않았습니다. Typescript에서 변수에 type을 할당하는 것은 도대체 어떤 의미일까요?
변수에 type을 할당한다? 저는 변수에 type을 할당한다는 것에 영향을 받는 부분에 집중했습니다. 그래서 변수에 type을 할당한다는 말을 아래와 같이 해석해 보았습니다. 결국 할당으로 영향을 받는 것이 Typescript compiler이기 때문입니다.</description>
    </item>
    
    <item>
      <title>[개발/RPC] 무에서 gRPC개념 쌓기</title>
      <link>https://heozeop.github.io/post/overviewing-grpc-concepts/</link>
      <pubDate>Sun, 16 Oct 2022 16:13:21 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/overviewing-grpc-concepts/</guid>
      <description>notice
뜬구름 잡는 소리를 할 수 있습니다. 댓글 주시면 반영할 수 있도록 하겠습니다.
반말과 충청도 사투리가 섞여 있습니다. 읽기 어려우신 부분 알려주세요!
update log
2022.10.17 - gRPC는 HTTP/2를 사용하므로, TCP에 기반합니다. RPC가 뭐여 정의 Remote Procedure Call의 약자로, 외부 procedure를 실행하는 것
어서 도냐 grpc가 http2를 쓴댜
→ TCP를 4계층으로 쓰고, 그 위에서 돌아가는 걸거여
→ 그럼 application 계층인건가
장점 IPC 등의 작업 없이 일단 실행시키는 것 가능 서로 다른 언어에서 rpc 통신 방법만 맞추면, 통신 가능 단점 보안 문제가 있을 수 있음 응답이 비동기임 proto buffer는 또 뭐여 정의 google에서 만든 rpc 통신 규약으로, 강력한 message의 정의를 통해서 일관된 데이터 구조로 소통 가능</description>
    </item>
    
    <item>
      <title>[OS] 운영체제란?</title>
      <link>https://heozeop.github.io/post/role-of-operating-system/</link>
      <pubDate>Sun, 03 Jul 2022 21:17:44 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/role-of-operating-system/</guid>
      <description>운영체제의 정의와 역할을 알아봅니다.</description>
    </item>
    
    <item>
      <title>[경험] 오픈소스에 PR 해본 썰</title>
      <link>https://heozeop.github.io/post/learn-and-feel-from-simple-opensource-contribution/</link>
      <pubDate>Tue, 10 Aug 2021 21:16:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/learn-and-feel-from-simple-opensource-contribution/</guid>
      <description>DefinitelyTyped에 라이브러리 타입을 올려보고, chakra ui에 pr을 올리며(아직 진행 중) 느낀점을 간단히 소개합니다.</description>
    </item>
    
    <item>
      <title>[CSS] CSS 기본 컨셉과 규칙 충돌</title>
      <link>https://heozeop.github.io/post/css-basic-concept/</link>
      <pubDate>Mon, 04 Jan 2021 18:01:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/css-basic-concept/</guid>
      <description>CSS 규칙 충돌에 대비해서 Inheritance, Specificity, Cascading을 알아봅니다.</description>
    </item>
    
    <item>
      <title>[CSS] CSS? 그게 뭔데?</title>
      <link>https://heozeop.github.io/post/css-what-is-that/</link>
      <pubDate>Sun, 03 Jan 2021 23:01:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/css-what-is-that/</guid>
      <description>css의 정의를 알아봅니다.</description>
    </item>
    
    <item>
      <title>[경험] 사이트 로딩속도가 이 번들때문에 느려요!</title>
      <link>https://heozeop.github.io/post/too-big-bundle-size/</link>
      <pubDate>Sun, 03 Jan 2021 13:45:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/too-big-bundle-size/</guid>
      <description>초보 개발자의 살떨렸던 3시간</description>
    </item>
    
    <item>
      <title>[HTML] HTML body?</title>
      <link>https://heozeop.github.io/post/html-body/</link>
      <pubDate>Sat, 02 Jan 2021 15:01:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/html-body/</guid>
      <description>html의 body를 알자.</description>
    </item>
    
    <item>
      <title>[HTML] HTML head? 뭐더라...?</title>
      <link>https://heozeop.github.io/post/html-head/</link>
      <pubDate>Fri, 01 Jan 2021 15:24:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/html-head/</guid>
      <description>HTML head태그를 알자.</description>
    </item>
    
    <item>
      <title>[HTML] HTML? 설명해보자</title>
      <link>https://heozeop.github.io/post/html-definition/</link>
      <pubDate>Wed, 30 Dec 2020 22:12:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/html-definition/</guid>
      <description>html의 정의와 기본 속성.</description>
    </item>
    
  </channel>
</rss>
