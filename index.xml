<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Crispy bLog</title>
    <link>https://heozeop.github.io/</link>
    <description>Recent content on Crispy bLog</description>
    <image>
      <url>https://heozeop.github.io/static/%ED%94%84%EB%A1%9C%ED%95%84%20%EC%9D%B4%EB%AF%B8%EC%A7%80.jpeg</url>
      <link>https://heozeop.github.io/static/%ED%94%84%EB%A1%9C%ED%95%84%20%EC%9D%B4%EB%AF%B8%EC%A7%80.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 17 Nov 2023 22:04:28 +0900</lastBuildDate><atom:link href="https://heozeop.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm Boj 11053</title>
      <link>https://heozeop.github.io/post/algorithm-boj-11053/</link>
      <pubDate>Fri, 17 Nov 2023 22:04:28 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-11053/</guid>
      <description>문제 가장 긴 증가하는 부분 수열 풀이 핵심 정렬된 수열 back &amp;lt; new =&amp;gt; append back &amp;gt; new =&amp;gt; bisect_left(arr, new + 1) 구체적인 로직 bisect_left n개 int로 받기 arr 받기 arr sort longest_arr = [0] for i in arr: back &amp;lt; i =&amp;gt; append back &amp;gt; i =&amp;gt; arr[bisect_left(arr, i + 1)] = i print(len(longest_arr) - 1) 실패 기억에 따라 증가하기만 해야한다고 생각해 같은값을 대체했다. 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from bisect import bisect_left n = int(input()) arr= list(map(int, input().</description>
    </item>
    
    <item>
      <title>Algorithm Boj 11048</title>
      <link>https://heozeop.github.io/post/algorithm-boj-11048/</link>
      <pubDate>Fri, 17 Nov 2023 21:52:49 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-11048/</guid>
      <description>문제 이동하기 풀이 핵심 dp[i][j] =&amp;gt; i,j에서 먹을 수 있는 최대 값 dp[i][j] = max(dp[i][j-1], dp[i-1][j-1], dp[i-1][j]) + arr[i][j] 구체적인 풀이 n,m 받기 arr로 int전환해서 map받기 for i in n for j in m dp ~ print(dp[n - 1][m - 1]) 코드 1 2 3 4 5 6 7 8 9 10 11 12 n,m = list(map(int, input().split())) arr = [] for _ in range(n): arr.append(list(map(int, input().split()))) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n+ 1): for j in range(1, m+1): dp[i][j] = max(dp[i][j-1], dp[i-1][j-1], dp[i-1][j]) + arr[i-1][j-1] print(dp[n][m]) </description>
    </item>
    
    <item>
      <title>Algorithm Boj 2193</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2193/</link>
      <pubDate>Fri, 17 Nov 2023 21:34:36 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2193/</guid>
      <description>문제 이친수 풀이 핵심 dp[i][k] =&amp;gt; i 자리 끝이 k인 이친수 dp[i][0] = dp[i-1][1] + dp[i -1][0] dp[i][1] = dp[i-1][0] dp[1][0] = 0 dp[1][1] = 1 구체적인 코드 n받는다. dp n, 2짜리 2차원 arr만든다 dp[1][0] = 0, dp[1][1] = 1 for i in 2 ~ n: dp[i][0] = dp[i-1][1] + dp[i-1][0] dp[i][1] = dp[i-1][0] print(dp[n][0] + dp[n][1]) 코드 1 2 3 4 5 6 7 8 9 10 11 n = int(input()) dp = [[0] * 2 for _ in range(n + 1)] dp[1][0] = 0 dp[1][1] = 1 for i in range(2, n + 1): dp[i][0] = dp[i-1][0] + dp[i-1][1] dp[i][1] = dp[i-1][0] print(dp[n][0] + dp[n][1]) </description>
    </item>
    
    <item>
      <title>Algorithm Boj 2294</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2294/</link>
      <pubDate>Fri, 17 Nov 2023 21:07:04 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2294/</guid>
      <description>문제 동전2 풀이 핵심 종류로 DP를 만든다. DP[K]는 K를 만들 수 있는 최소 동전 개수다. 구체적인 로직 n,k 받기 arr에 array 받기 for i ~ n dp[i][k] = min(dp[i-1][k], dp[k - arr[i]], k % i == 0 ? k / i : INF) print dp[n][k] 주의 문제를 제대로 읽지 않아서 구할 수 없는 경우를 처리하지 못했다. 코드로 옮기기 전에 조건을 다시한번 확인하자. 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 n,k = list(map(int, input().</description>
    </item>
    
    <item>
      <title>Algorithm Boj 1463</title>
      <link>https://heozeop.github.io/post/algorithm-boj-1463/</link>
      <pubDate>Tue, 14 Nov 2023 18:29:54 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-1463/</guid>
      <description>문제 1로 만들기 풀이 생각나는 방법 n짜리 넣어 두고 1가는 횟수 찾기 1에 먼저 도착하면 그게 최소 시간 복잡도 O(n) 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 n = int(input()) INF = 1e9 arr = [INF] * (n + 1) arr[n] = 0 for i in range(n, 0, -1): if i % 3 == 0: arr[int(i/3)] = min(arr[int(i/3)], arr[i] + 1) if i % 2 == 0: arr[int(i/2)] = min(arr[int(i/2)], arr[i] + 1) arr[i-1] = min(arr[i-1], arr[i] + 1) print(arr[1]) 다른 방법 dfs </description>
    </item>
    
    <item>
      <title>Algorithm Boj 11660</title>
      <link>https://heozeop.github.io/post/algorithm-boj-11660/</link>
      <pubDate>Thu, 09 Nov 2023 21:05:23 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-11660/</guid>
      <description>문제 구간 합 구하기5 문제 풀이 핵심
구간합 사각으로 덧셈하기 V_i_j = V_i-1_j + V_i_j-1 - V_i-1_j-1 Sum_x2_y2 - sum_x1_y2 - sum_x2_y1 + sum_x2_y2 자세히
변수 n, m, table_map, sum_map 코드
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import sys input = sys.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 16437</title>
      <link>https://heozeop.github.io/post/algorithm-boj-16437/</link>
      <pubDate>Wed, 08 Nov 2023 08:27:40 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-16437/</guid>
      <description>문제 양 구출 작전 풀이 핵심 양있는 섬에서 1번 섬까지 가기 가는게 독립시행 자세히 맵으로 트리 만들기 트리 순회 해서 1번 섬으로 도착하는 것 하기 양 있는데는 한번씩 돌기 변수 island_map sheep_land_list 시간 복잡도 O(n^2) m_i: i번째 길 수 n: 1번까지 path 길이 수열의 합 간과 한것 사이클, 도달할 수 없는 경우가 있음 1에서 부터 후위 순회로 풀어야 했음 답 보고 푼 풀이 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import sys sys.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 1987</title>
      <link>https://heozeop.github.io/post/algorithm-boj-1987/</link>
      <pubDate>Tue, 07 Nov 2023 21:23:34 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-1987/</guid>
      <description>문제 알파벳 해결 방법을 생각해 보자. 방법 1. 생각나는 대로 핵심 백트랙킹으로 visit을 탐색하면서 돈다. 자세하게 dfs로 이동 가능한 영역 접근한다. 여러번 하지 않게 접근한 횟수를 기록한다. 갈데 없으면 비교하고 하나 뺀다. 필요 상수 directions 필요 변수 visit visitBoard n,m board 시간 복잡도 O(4 * 26) 4방향, 최대 26개 실패한 원인 in으로 확인하는데 시간이 오래 걸린다. dp처럼 풀려고 했다. 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 n,m = list(map(int, input().</description>
    </item>
    
    <item>
      <title>Algorithm Boj 10026</title>
      <link>https://heozeop.github.io/post/algorithm-boj-10026/</link>
      <pubDate>Tue, 31 Oct 2023 08:21:45 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-10026/</guid>
      <description>문제 적록 색약 해답 찾기 핵심 로직 적록색약이 아닌 경우에 구역 개수 구하기 적록색약인 경우에 구역 개수 구하기 각각 출력하기 구역 개수 구하기 n ^ 4 &amp;gt; 1억이니 괜찮을 것 같다. 이중 FOR 구문에서 DFS를 돌면서 VISIT_MAP을 활용해 탐색한다. 적록색약인 경우 G를 R로 바꾸는 전처리를 먼저한다. 전체 흐름 맵 복사 적록 색약인 경우 바꾸기 구역 개수 구하기 출력 필요 상수 directions 필요 변수 n : 1 ~ 100 source_map : 2차원, 100 * 100 visit_map : 2차원, 100 * 100 count : 숫자 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 import sys sys.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2568</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2568/</link>
      <pubDate>Mon, 30 Oct 2023 22:27:52 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2568/</guid>
      <description>문제 안전 영역 시도 생각 나는 방법 핵심 물뿌리기 안전 영역 구하기 1-2 가장 큰거까지 반복 물뿌리기 n,n 찾아 보기 N^2 안전 영역 구하기 dfs로 돌면서 찾기 N^2 가장 큰거 까지 반복 M 시간 복잡도 N^3 필요 상수 diresctions 필요 변수 visit map input 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 import sys sys.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2638</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2638/</link>
      <pubDate>Sun, 29 Oct 2023 18:30:34 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2638/</guid>
      <description>문제 치즈 문제 풀이 하기 방법 1 생각 가볍게 녹을 치즈 찾기 녹이기 1,2번 반복 녹을 치즈 찾기 bfs로 치즈 아닌 부분 찾기 윤곽중 2면 이상 치즈 아닌 부분 맡닿은거 마크 지우기 필요한 상수 direction 필요한 변수 치즈 아닌 부분 저장할 list 치즈 아닌 부분 탐색할 queue 마크 저장할 list 맵 저장할 list 시간 복잡도 bfs N^2 N일듯 =&amp;gt; N^3 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 from collections import deque n, m = list(map(int, input().</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2146</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2146/</link>
      <pubDate>Thu, 26 Oct 2023 20:23:08 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2146/</guid>
      <description>문제 다리 만들기 문제를 생각해 보자. 1. 생각나는 대로: 대강 대륙은 갈 수 없는 곳 대륙 옆이 길이 1로 설정 bfs로 모두 돌면서 다른 대륙 도달하기 자세히 대륙 별로 대륙 가를 1자로 한다. visit을 나타낼때 출발지, 거리를 나타낸다. 만난 곳이라면 거리를 더해서 min에 저장한다. min을 출력한다. 시간 복잡도 N^2 0인 곳 + 상하좌우에 대륙있는 곳 n^2 탐색 같은 대륙 출발 대륙 통과 바다 짧은 데 다른 대륙 계산 시도 1 문제 대륙이 통과하면 만나지를 못한다.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 16236</title>
      <link>https://heozeop.github.io/post/algorithm-boj-16236/</link>
      <pubDate>Tue, 24 Oct 2023 21:30:46 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-16236/</guid>
      <description>문제 아기 상어 해결 방법을 생각해 보자. 방법 1: 생각 나는 대로: 기본 로직
물고기 크기/위치를 기준으로 정렬한다. 먹을 수 있는 물고기만 담는다. 거리를 계산한다. 가장 짧은 거리의 물고기만 먹는다. 먹은 수대로 상어 크기를 올린다. 핵심 로직
상어의 성장 여부 확인 먹을 수 있는 물고기만 담기 거리 계산하기 bfs로 탐색하기 글로벌 변수
먹은 물고기 수 상어 성장 여부 판단 상어 크기 상어 위치 시간 순차 로직
상어 위치 찾기 bfs탐색하며 왼 위 아래 오른쪽 순 돌기 가장 먼저 탐색 된 상어 크기보다 작은 물고기 섭취 물고기 섭취 불가시 종료 상어 성장 여부 판단 이동 시간 기록 1 - 4 반복 코드</description>
    </item>
    
    <item>
      <title>Algorithm Boj 14502</title>
      <link>https://heozeop.github.io/post/algorithm-boj-14502/</link>
      <pubDate>Mon, 23 Oct 2023 22:07:43 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-14502/</guid>
      <description>문제 연구소 접근 방법을 생각해보자. 방법 1: 생각나는 것: ~47분 바이러스 위치 확인하기
빈칸 위치 확인하기
빈칸 nC3 으로 위치뽑기
바이러스 위치 기준으로 돌면서 dfs로 맵 채우기 전체 - 바이러스 - 벽수로 빈값 구하기 빈값 크기 비교 하기 (n * m)C3 * (n * m) =&amp;gt; 약 266만
구현
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 directions = [ [0,1], [0,-1], [1,0], [-1, 0] ] def dfs(x,y, visited): global n,m, lab_map; for i in range(4): nx = x + directions[i][0] ny = y + directions[i][1] if nx &amp;lt; 0 or ny &amp;lt; 0 or nx &amp;gt;= n or ny &amp;gt;= m: continue if lab_map[nx][ny] !</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2178</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2178/</link>
      <pubDate>Mon, 23 Oct 2023 21:43:03 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2178/</guid>
      <description>문제 미로탐색 해법을 생각해보자. 방법 1: 그냥 떠오르는 대로 bfs로 0,0부터 탐색 가장 먼저 N,M 도착하면 출력하기 n^2 구현 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from collections import deque directions = [ [0,1], [0,-1], [1,0], [-1,0], ] VISITED = -1 TARGET = &amp;#39;1&amp;#39; queue = deque() queue.</description>
    </item>
    
    <item>
      <title>Algorithm Boj 2667</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2667/</link>
      <pubDate>Mon, 23 Oct 2023 20:59:09 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2667/</guid>
      <description>문제 단지 번호 붙이기 주요 로직을 생각해보자. 1번: 막생각 나는 대로 | O(n^3) 2차원 배열을 입력 받는다. 방문 여부를 const로 설정한다. 2차원 배열을 순회한다. 1이 아니면 통과한다. 상하좌우 탐색한다. dfs로 집 수를 찾는다. 집수 list에 저장한다. 집수 list를 정렬한다. 집수를 출력한다. 구현 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 TARGET = &amp;#39;1&amp;#39; VISITED = -1 cost_list = [] directions = [ [0, 1], [0, -1], [1,0], [-1,0] ] def dfs(x,y): global n map_list[x][y] = VISITED localCount = 1 for i in range(4): nx = x + directions[i][0] ny = y + directions[i][1] if nx &amp;lt; 0 or ny &amp;lt; 0 or nx &amp;gt;= n or ny &amp;gt;= n: continue if map_list[nx][ny] !</description>
    </item>
    
    <item>
      <title>Algorithm Boj 15686</title>
      <link>https://heozeop.github.io/post/algorithm-boj-15686/</link>
      <pubDate>Fri, 13 Oct 2023 19:45:06 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-15686/</guid>
      <description>핵심 아이디어 NM짜리 이차원 배열을 이용해 최소 치킨 거리를 구한다. 백트랙을 이용해 M개 집 치킨거리를 구한다. 구현 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 n, m = list(map(int, input().split())) city = [] for _ in range(n): city.</description>
    </item>
    
    <item>
      <title>Boj 15684</title>
      <link>https://heozeop.github.io/post/algorithm-boj-15684/</link>
      <pubDate>Sat, 07 Oct 2023 08:26:40 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-15684/</guid>
      <description>생각하기 핵심 로직 브루트포스 i -&amp;gt; i 로 가는지 점검한다. 짝수개여야 가능할 것 같다. 후보군을 리스트로 만든다. 후보군을 백트랙으로 돌면서 3개까지 돈다. 1-3반복한다. 핵심 조건 3보다 크면 -1 불가하면 -1 사고하지 못한점 짝수개여야 가능하다는 것은 필요 조건은 될 수 있어도 충분 조건이 아니다. 다음에 다시풀 문제 핵심 로직 탐지 탐지 하는 방법 내리가면서 시작점과 동일한 끝점인지 확인하기 내리 갈때는 양방향 확인하기 탐색 탐지 nh에 대해서 백트래킹 n^n*h^2 =&amp;gt; 90000으로 ㄱㅊ &amp;lt;- 틀림?</description>
    </item>
    
    <item>
      <title>Boj 14888</title>
      <link>https://heozeop.github.io/post/algorithm-boj-14888/</link>
      <pubDate>Fri, 06 Oct 2023 19:53:38 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-14888/</guid>
      <description>주요 로직 계속 계산하면서 큰값과 작은 값으로 비교한다. 전체 다 돌아야 하며, O(4n)이다. -10억 ~ 10억이므로 int 범위에서 된다. 예상하지 못한 것 음수가 나오는 경우, 나눗셈 연산을 할때 몫을 잘 구해야한다. 음수가 -10억까지 되는데 범위를 잘못 찍었다. code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 n = int(input()) nums = list(map(int, input().</description>
    </item>
    
    <item>
      <title>Boj 2661</title>
      <link>https://heozeop.github.io/post/algorithm-boj-2661/</link>
      <pubDate>Thu, 05 Oct 2023 18:31:38 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-2661/</guid>
      <description>주요 로직을 생각해 보자. 끝에 하나 붙을때 마다 점검해준다. 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 n = int(input()) s=[] def isBadSequence(addStr): temp = &amp;#34;&amp;#34;.join(s) + addStr for i in range(1, len(temp) // 2 + 1): if temp[-2 * i : -1 * i] == temp[-1 * i :]: return True return False def dfs(): global s if len(s) == n: print(&amp;#34;&amp;#34;.</description>
    </item>
    
    <item>
      <title>디테일을 챙기는 개발자가 되고 싶어 하는 고찰</title>
      <link>https://heozeop.github.io/post/detailed-developer/</link>
      <pubDate>Thu, 05 Oct 2023 07:19:49 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/detailed-developer/</guid>
      <description>TL;DR 저는 디테일을 잘 못챙깁니다. 디테일을 챙기는 개발자가 어떤 사람인지 정리합니다. 디테일을 챙기는 개발자가 되기 위해 남은 과정을 정리합니다. 정리한 과정이 올바른지 퇴고 합니다. 저는 디테일을 잘 못챙깁니다. 항상 제가 받는 피드백이 있습니다.
| &amp;lsquo;크리스피님, 여기 이 입력에서는 이렇게 되어 확인 요청드립니다.&amp;rsquo;
지금까지는 받아오면서 아무생각 없이 이슈에 대응만 하였습니다. 그러다 문득 깨달아 버렸습니다.
&amp;lsquo;이게 맞나?&amp;rsquo;
항상 하는 실수인데, 예방하는 수는 없었을까? 한번 더 확인 하는게 불충분 하다면 다른 방법을 찾는게 좋지 않았을까?</description>
    </item>
    
    <item>
      <title>어떤 개발자가 되고 싶은지에 관한 고찰</title>
      <link>https://heozeop.github.io/post/i-wanna-be/</link>
      <pubDate>Wed, 30 Aug 2023 21:59:51 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/i-wanna-be/</guid>
      <description>TL;DR 상상해 보았습니다. 5년 뒤를 상상해 보았습니다. 3년 뒤를 상상해 보았습니다. 1년 뒤를 상상해 보았습니다. 저는 이런 개발자가 되고 싶은가 봅니다. 고민해 보았습니다. 최근 CTO님과 면담하며 질문을 받았습니다. &amp;lsquo;승찬님은 어떤 개발자가 되고 싶나요?&amp;rsquo; 항상 머리 복잡하다며 넘겨왔던 질문이기에 모른척을 하였습니다. 이제 저도 연차로 4년차가 됩니다. 하지만 아직 &amp;lsquo;되고 싶은 개발자&amp;rsquo;는 커녕 &amp;lsquo;어떤 공부를 할지&amp;rsquo; 조차 스스로 정하지 못했습니다. 집에 와서 심란한 마음에 더 이상은 이럴 수 없다고 생각했습니다. 혼자 끙끙 앓아봐야 소용없다고 판단해, 고민을 공유해 봅니다.</description>
    </item>
    
    <item>
      <title>[NestJS] 스웨거에 BasicAuth 더하기, feat fastify,GCP</title>
      <link>https://heozeop.github.io/post/nestjs-basic-auth-fastify/</link>
      <pubDate>Thu, 06 Jul 2023 21:36:00 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/nestjs-basic-auth-fastify/</guid>
      <description>스웨거 흔히 스웨거(Swagger)라고 부르는 OpenAPI를 사용할때, 저는 누가 어떻게 보느냐를 고민합니다. 직접 인증을 구현한 경우는 로그인을 시키고, AWS를 사용하는 경우 ip로 접근을 불가하게 만들기도 했습니다. 하지만 GCP의 CloudRun을 이용하는 경우, 구체적인 자원에 접근하기 어려워 Ip로 접근을 차단하는 것은 한계가 있었습니다.
그래서 떠올린게 basic auth였습니다. 물론 brute-force 공격에는 뚫리기야 하겠지만, 비용 대비 얻는게 크다고 생각했습니다. 제가 원하는 건 아무나 보지 못하는 것이고, 보안 관리는 기본적으로 구글에서 해주기 때문에 제 목적에 딱 알맞는 것이었죠.</description>
    </item>
    
    <item>
      <title>좋은 코드와 나쁜 코드</title>
      <link>https://heozeop.github.io/post/book-good-code-bad-code/</link>
      <pubDate>Tue, 20 Jun 2023 16:10:35 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/book-good-code-bad-code/</guid>
      <description>품질의 정의와 좋다 나쁘다를 생각하기</description>
    </item>
    
    <item>
      <title>[알고리즘] Algorithm Boj 1107</title>
      <link>https://heozeop.github.io/post/algorithm-boj-1107/</link>
      <pubDate>Fri, 26 May 2023 05:12:05 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/algorithm-boj-1107/</guid>
      <description>TL;DR
GOLD4 문제 왜틀리지 시전 틀린 케이스를 찾아버리고야 말테다 그렇구나. 정확한 사고로 풀어야 겠다 오늘의 문제 뭔일인가. 논리적인 접근 위 문제는 특정한 값 위나 아래로 접근하며 가장 빠르게 도달하는 경우의 수를 구하는 문제입니다. 이러한 특성에 근거해, 목표로 하는 값의 2배로 접근시 충분히 원하는 결과를 얻을 것이라고 생각했습니다.
2번째 제출 까지는 말이죠
틀린답 using namespace std; vector&amp;lt;int&amp;gt; allowed; int targetChannel; int visited[1000001]; int m; int count(int); // 특정 지점으로 가는데까지 버튼 누르는 수 계산 void findCombinations(int, vector&amp;lt;int&amp;gt;&amp;amp;); // 1~제한까지 숫자 조합 생성 void input(); void solve(); int main(void) { input(); solve(); return 0; } void input() { cin &amp;gt;&amp;gt; targetChannel &amp;gt;&amp;gt; m; int temp; set&amp;lt;int&amp;gt; blocked; for(int i = 0; i &amp;lt; m; ++i) { cin &amp;gt;&amp;gt; temp; blocked.</description>
    </item>
    
    <item>
      <title>[책] &#39;기억, 꿈, 사상&#39;에 대한 감상</title>
      <link>https://heozeop.github.io/post/book-memories-dreams-reflections/</link>
      <pubDate>Sun, 30 Oct 2022 20:49:13 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/book-memories-dreams-reflections/</guid>
      <description>저는 부끄러움이 많은 관심 종자입니다. 이 책의 감상을 나누고 싶지만, 거절이 무서워 글이라는 방법을 택했습니다. 구분선 아래로, 문장과 감상의 형식이 전개 됩니다. 읽은 날, 내용은 추가될 것입니다. 언젠가 이 내용을 함께 논의 할 수 있기를 소원해 봅니다.
2022년 스터디 카페에서 시작하며
문득 취리히에서의 내 생활이 떠올랐다. 내가 심취했던 유년시절의 세계는 영원한 것이었으며, 나는 그것으로부터 떨어져나와, 계속 굴러가며 점점 더 멀어져가는 시간 속으로 빠져들어가고 만 것이었다. 나는 나의 미래를 잃지 않기 위해 그 장소에서 억지로 몸을 돌려야만 했다.</description>
    </item>
    
    <item>
      <title>[경험] 시스템에 불이 확, 나는 왁</title>
      <link>https://heozeop.github.io/post/when-fire-on-the-external-system/</link>
      <pubDate>Fri, 28 Oct 2022 21:31:00 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/when-fire-on-the-external-system/</guid>
      <description>아쉬운 에러 대응 과정을 기록해 봅니다.</description>
    </item>
    
    <item>
      <title>의식적으로 쓰기 - 선언과 단언</title>
      <link>https://heozeop.github.io/post/typescript-type-assignment/</link>
      <pubDate>Wed, 19 Oct 2022 22:31:04 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/typescript-type-assignment/</guid>
      <description>들어가며 Typescript에선 변수에 type을 어떻게 할당하나요?
여러분이 위와 같은 질문을 받았다면, 어떻게 답변하시겠어요? 저는 Effective Typescript라는 책을 읽으면서, 이 질문을 생각하고 순간 멍해짐을 느꼈습니다. 제겐 너무나도 당연스러운 말인 변수에 type을 할당하는 문장을 풀어서 설명하려니, 적절한 문장이 떠오르지 않았습니다. Typescript에서 변수에 type을 할당하는 것은 도대체 어떤 의미일까요?
변수에 type을 할당한다? 저는 변수에 type을 할당한다는 것에 영향을 받는 부분에 집중했습니다. 그래서 변수에 type을 할당한다는 말을 아래와 같이 해석해 보았습니다. 결국 할당으로 영향을 받는 것이 Typescript compiler이기 때문입니다.</description>
    </item>
    
    <item>
      <title>[개발/RPC] 무에서 gRPC개념 쌓기</title>
      <link>https://heozeop.github.io/post/overviewing-grpc-concepts/</link>
      <pubDate>Sun, 16 Oct 2022 16:13:21 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/overviewing-grpc-concepts/</guid>
      <description>notice
뜬구름 잡는 소리를 할 수 있습니다. 댓글 주시면 반영할 수 있도록 하겠습니다.
반말과 충청도 사투리가 섞여 있습니다. 읽기 어려우신 부분 알려주세요!
update log
2022.10.17 - gRPC는 HTTP/2를 사용하므로, TCP에 기반합니다. RPC가 뭐여 정의 Remote Procedure Call의 약자로, 외부 procedure를 실행하는 것
어서 도냐 grpc가 http2를 쓴댜
→ TCP를 4계층으로 쓰고, 그 위에서 돌아가는 걸거여
→ 그럼 application 계층인건가
장점 IPC 등의 작업 없이 일단 실행시키는 것 가능 서로 다른 언어에서 rpc 통신 방법만 맞추면, 통신 가능 단점 보안 문제가 있을 수 있음 응답이 비동기임 proto buffer는 또 뭐여 정의 google에서 만든 rpc 통신 규약으로, 강력한 message의 정의를 통해서 일관된 데이터 구조로 소통 가능</description>
    </item>
    
    <item>
      <title>[OS] 운영체제란?</title>
      <link>https://heozeop.github.io/post/role-of-operating-system/</link>
      <pubDate>Sun, 03 Jul 2022 21:17:44 +0900</pubDate>
      
      <guid>https://heozeop.github.io/post/role-of-operating-system/</guid>
      <description>운영체제의 정의와 역할을 알아봅니다.</description>
    </item>
    
    <item>
      <title>[경험] 오픈소스에 PR 해본 썰</title>
      <link>https://heozeop.github.io/post/learn-and-feel-from-simple-opensource-contribution/</link>
      <pubDate>Tue, 10 Aug 2021 21:16:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/learn-and-feel-from-simple-opensource-contribution/</guid>
      <description>DefinitelyTyped에 라이브러리 타입을 올려보고, chakra ui에 pr을 올리며(아직 진행 중) 느낀점을 간단히 소개합니다.</description>
    </item>
    
    <item>
      <title>[CSS] CSS 기본 컨셉과 규칙 충돌</title>
      <link>https://heozeop.github.io/post/css-basic-concept/</link>
      <pubDate>Mon, 04 Jan 2021 18:01:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/css-basic-concept/</guid>
      <description>CSS 규칙 충돌에 대비해서 Inheritance, Specificity, Cascading을 알아봅니다.</description>
    </item>
    
    <item>
      <title>[CSS] CSS? 그게 뭔데?</title>
      <link>https://heozeop.github.io/post/css-what-is-that/</link>
      <pubDate>Sun, 03 Jan 2021 23:01:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/css-what-is-that/</guid>
      <description>css의 정의를 알아봅니다.</description>
    </item>
    
    <item>
      <title>[경험] 사이트 로딩속도가 이 번들때문에 느려요!</title>
      <link>https://heozeop.github.io/post/too-big-bundle-size/</link>
      <pubDate>Sun, 03 Jan 2021 13:45:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/too-big-bundle-size/</guid>
      <description>초보 개발자의 살떨렸던 3시간</description>
    </item>
    
    <item>
      <title>[HTML] HTML body?</title>
      <link>https://heozeop.github.io/post/html-body/</link>
      <pubDate>Sat, 02 Jan 2021 15:01:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/html-body/</guid>
      <description>html의 body를 알자.</description>
    </item>
    
    <item>
      <title>[HTML] HTML head? 뭐더라...?</title>
      <link>https://heozeop.github.io/post/html-head/</link>
      <pubDate>Fri, 01 Jan 2021 15:24:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/html-head/</guid>
      <description>HTML head태그를 알자.</description>
    </item>
    
    <item>
      <title>[HTML] HTML? 설명해보자</title>
      <link>https://heozeop.github.io/post/html-definition/</link>
      <pubDate>Wed, 30 Dec 2020 22:12:03 +0000</pubDate>
      
      <guid>https://heozeop.github.io/post/html-definition/</guid>
      <description>html의 정의와 기본 속성.</description>
    </item>
    
  </channel>
</rss>
